multipin and cams on for zoom meetings

```python
import requests
import jwt
import datetime
import time

def enable_multi_pin(api_key, api_secret, meeting_id):
    # Generate a JWT token to authenticate with Zoom API
    jwt_token = generate_jwt(api_key, api_secret)
    
    # Set the URL for the Zoom API endpoint to update meeting settings
    url = f"https://api.zoom.us/v2/meetings/{meeting_id}/settings"
    
    # Define the headers for the request
    headers = {
        "Authorization": f"Bearer {jwt_token}",
        "Content-Type": "application/json"
    }
    
    # Define the payload to enable multi-pin for guests
    payload = {
        "settings": {
            "allow_multiple_devices": True
        }
    }
    
    # Send a PATCH request to update meeting settings
    response = requests.patch(url, json=payload, headers=headers)
    
    # Check if the request was successful
    if response.status_code == 204:
        print("Multi-pin for guests enabled successfully!")
    else:
        print(f"Failed to enable multi-pin. Status code: {response.status_code}")

def prompt_camera_on(api_key, api_secret, meeting_id):
    # Generate a JWT token to authenticate with Zoom API
    jwt_token = generate_jwt(api_key, api_secret)
    
    # Define the URL for the Zoom API endpoint to manage participants
    url = f"https://api.zoom.us/v2/meetings/{meeting_id}/participants"
    
    # Define the headers for the request
    headers = {
        "Authorization": f"Bearer {jwt_token}",
        "Content-Type": "application/json"
    }
    
    # Poll participants continuously until their cameras are turned on
    while True:
        response = requests.get(url, headers=headers)
        participants = response.json().get("participants", [])
        
        # Check if any participants have their cameras turned off
        cameras_off = [participant["id"] for participant in participants if not participant.get("camera")]
        
        if cameras_off:
            # Prompt participants to turn their cameras on
            for participant_id in cameras_off:
                prompt_camera_on_for_participant(participant_id, api_key, api_secret)
        else:
            print("All participants have their cameras turned on.")
            break
        
        # Wait for some time before checking again
        time.sleep(60)  # Check every 60 seconds

def prompt_camera_on_for_participant(participant_id, api_key, api_secret):
    # Generate a JWT token to authenticate with Zoom API
    jwt_token = generate_jwt(api_key, api_secret)
    
    # Define the URL for the Zoom API endpoint to manage a specific participant
    url = f"https://api.zoom.us/v2/meetings/participants/{participant_id}/status"
    
    # Define the headers for the request
    headers = {
        "Authorization": f"Bearer {jwt_token}",
        "Content-Type": "application/json"
    }
    
    # Define the payload to prompt the participant to turn their camera on
    payload = {
        "action": "ask_to_start_video"
    }
    
    # Send a PUT request to prompt the participant to turn their camera on
    response = requests.put(url, json=payload, headers=headers)
    
    # Check if the request was successful
    if response.status_code == 204:
        print(f"Prompted participant {participant_id} to turn camera on.")
    else:
        print(f"Failed to prompt participant {participant_id}. Status code: {response.status_code}")

def generate_jwt(api_key, api_secret):
    # Define the payload for the JWT token
    payload = {
        "iss": api_key,
        "exp": datetime.datetime.utcnow() + datetime.timedelta(minutes=10)
    }
    
    # Generate the JWT token
    jwt_token = jwt.encode(payload, api_secret, algorithm="HS256")
    
    return jwt_token

# Example usage
api_key = "your_api_key"
api_secret = "your_api_secret"
meeting_id = "your_meeting_id"

enable_multi_pin(api_key, api_secret, meeting_id)
prompt_camera_on(api_key, api_secret, meeting_id)
```

